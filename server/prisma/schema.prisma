// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UoM {
  PCS
  PACK
  UNIT
}

enum PaymentMethod {
  COD
  TRANSFER
}

enum OrderType {
  STOCK
  SALES
}

model Products {
  productId   String   @id
  productName String   @unique
  basePrice   Decimal
  quantity    Int
  bom         Json?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @default(now()) @updatedAt

  orders Orders[]

  @@unique([updatedAt, productId])
}

model Inventory {
  partId       String   @id
  partName     String
  partPrice    Decimal
  partQuantity Int
  partUoM      String
  createdAt    DateTime @default(now())
  updatedAt    DateTime @default(now()) @updatedAt

  orders Orders[]

  @@unique([updatedAt, partId])
}

model Users {
  userId   Int    @id @default(autoincrement())
  username String @unique
  password String
  role     String

  orders Orders[]

  @@index([username])
}

model Customers {
  customerId  Int      @id @default(autoincrement())
  companyName String
  address     String
  phoneNumber String
  ssmNumber   String
  postCode    String
  email       String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @default(now()) @updatedAt

  orders Orders[]

  @@unique([updatedAt, customerId])
}

model Orders {
  orderId       Int            @id @default(autoincrement())
  productId     String?
  partId        String?
  customerId    Int
  agentId       Int
  orderType     OrderType
  paymentMethod PaymentMethod?
  modifications Json
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @default(now()) @updatedAt

  part     Inventory? @relation(fields: [partId], references: [partId], onDelete: Cascade)
  product  Products?  @relation(fields: [productId], references: [productId], onDelete: Cascade)
  customer Customers  @relation(fields: [customerId], references: [customerId], onDelete: Cascade)
  agent    Users      @relation(fields: [agentId], references: [userId], onDelete: Cascade)

  invoices Invoices[]

  @@unique([updatedAt, orderId])
}

model Invoices {
  invoiceId    Int      @id @default(autoincrement())
  orderId      Int
  totalAmount  Decimal
  customerData Json
  orderSummary Json
  timestamp    DateTime @default(now())
  createdAt    DateTime @default(now())
  updatedAt    DateTime @default(now()) @updatedAt

  orders Orders @relation(fields: [orderId], references: [orderId])

  @@unique([updatedAt, invoiceId])
}

model SalesSummary {
  salesSummaryId   Int      @id @default(autoincrement())
  totalValue       Decimal
  changePercentage Float
  createdAt        DateTime @default(now())
  updatedAt        DateTime @default(now()) @updatedAt

  @@unique([updatedAt, salesSummaryId])
}

model SalesByProduct {
  salesByProductId Int      @id @default(autoincrement())
  productId        String
  value            Decimal
  changePercentage Float
  createdAt        DateTime @default(now())
  updatedAt        DateTime @default(now()) @updatedAt

  @@unique([updatedAt, salesByProductId])
}

model InventorySummary {
  inventorySummaryId Int      @id @default(autoincrement())
  totalAmount        Int
  changePercentage   Float
  createdAt          DateTime @default(now())
  updatedAt          DateTime @default(now()) @updatedAt

  @@unique([updatedAt, inventorySummaryId])
}
